# See https://www.loraserver.io/lora-app-server/install/config/ for a full
# configuration example and documentation.

[general]
# debug=5, info=4, warning=3, error=2, fatal=1, panic=0
log_level=4

[postgresql]
dsn="postgres://{{lora_appserver_postgres_user}}:{{lora_appserver_postgres_password}}@{{lora_appserver_postgres_host}}/{{lora_appserver_postgres_db}}?sslmode=disable"

[application_server.integration.mqtt]
server="{{lora_mqttserver}}"
username="{{lora_appserver_mqtt_user}}"
password="{{lora_appserver_mqtt_password}}"
client_id="lora_appsrv"

uplink_topic_template="{{ lora_app_uplink_tmpl }}"
downlink_topic_template="{{ lora_app_downlink_tmpl }}"
join_topic_template="{{ lora_app_join_tmpl }}"
ack_topic_template="{{ lora_app_ack_tmpl }}"
error_topic_template="{{ lora_app_error_tmpl }}"
status_topic_template="{{ lora_app_status_tmpl }}"
location_topic_template="{{ lora_app_location_tmpl }}"

uplink_retained_message=false
join_retained_message=false
ack_retained_message=false
error_retained_message=false
status_retained_message=false
location_retained_message=false

# This is the API and web-interface exposed to the end-user.
[application_server.external_api]
# ip:port to bind the (user facing) http server to (web-interface and REST / gRPC api)
bind="{{lora_appserver_external_socket}}"

jwt_secret=" {{lora_appserver_secret}}"

[metrics.prometheus]
endpoint_enabled={{ lora_appserver_metrics_enabled | lower }}
{% if lora_appserver_metrics_enabled %}
bind="{{ lora_appserver_metrics_endpoint }}"
{% else %}
bind=""
{% endif %}
api_timing_histogram=false